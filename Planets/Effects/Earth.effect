

pass Default:

    vertex:
        template default
        insert @VERTEX_PROJECTION:
            gl_Position = p3d_ModelViewProjectionMatrix * vertex;
        insert @SHADER_END:
            vec4 vertex = vec4(normalize(p3d_Vertex.xyz), p3d_Vertex.w);
            vec3 normal = vertex.xyz;
            vOutput.normalWorld = normalize(tpose_world_to_model * vec4(normal, 0) ).xyz;
            vOutput.positionWorld = (trans_model_to_world * vertex).xyz;

    fragment:
        template default


pass Shadows:

    vertex:
        template default
        insert @SHADER_END:
            //oposite due to pieline bug :)
            gl_Position = p3d_ModelViewProjectionMatrix * vertex;

        insert @VERTEX_PROJECTION:
            vec4 vertex = vec4(normalize(p3d_Vertex.xyz), p3d_Vertex.w);
            vec3 normal = vertex.xyz;
            gl_Position = p3d_ModelViewProjectionMatrix * vertex;

    fragment:
        template default