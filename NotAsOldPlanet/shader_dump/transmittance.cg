//Cg
//Cg profile gp4vp gp4fp 

////////////////////////////////////////////////////////////
//
// Auto-Generated-Shader 'transmittance'
//
// Generated from: 
//  - scattering/constants.cg
//  - scattering/common.cg
//  - scattering/transmittance.cg
//
////////////////////////////////////////////////////////////




////////////////////////////////////////////////////////////
// FILE: scattering/constants.cg
////////////////////////////////////////////////////////////
const float Rg = 6360.0;
const float Rt = 6420.0;
const float RL = 6421.0;

const int TRANSMITTANCE_W = 256;
const int TRANSMITTANCE_H = 64;

const int SKY_W = 64;
const int SKY_H = 16;

const int RES_R = 32;

const int RES_MU = 128;
const int RES_MU_S = 32;
const int RES_NU = 8;
const int RES_RNU = 256; // RES_MU_S * RES_NU


// PHYSICAL MODEL PARAMETERS

const float AVERAGE_GROUND_REFLECTANCE = 0.1;


// Rayleigh
const float HR = 8.0;
const float3 betaR = float3(5.8e-3, 1.35e-2, 3.31e-2);

// Mie
// DEFAULT
const float HM = 1.2;
const float3 betaMSca = float3(4e-3);
const float3 betaMEx  = float3(float3(4e-3) / 0.9);
const float mieG = 0.8;
// CLEAR SKY
// const float HM = 1.2;
// const float3 betaMSca = float3(20e-3);
// const float3 betaMEx = float3(20e-3) / 0.9;
// const float mieG = 0.76;
// PARTLY CLOUDY
// const float HM = 3.0;
// const float3 betaMSca = float3(3e-3);
// const float3 betaMEx = float3(3e-3) / 0.9;
// const float mieG = 0.65;


// NUMERICAL INTEGRATION PARAMETERS
const int TRANSMITTANCE_INTEGRAL_SAMPLES = 500;
const int INSCATTER_INTEGRAL_SAMPLES = 50;
const int IRRADIANCE_INTEGRAL_SAMPLES = 32;
const int INSCATTER_SPHERICAL_INTEGRAL_SAMPLES = 16;

const float M_PI = 3.141592657;

const int ACTUAL_LAYERS = 32;


// PARAMETERIZATION OPTIONS
#define TRANSMITTANCE_NON_LINEAR
#define INSCATTER_NON_LINEAR


#define DELTA_E_SF (1.0)
#define DELTA_J_SF (1.0)




////////////////////////////////////////////////////////////
// FILE: scattering/common.cg
////////////////////////////////////////////////////////////


// PARAMETERIZATION FUNCTIONS

float2 getTransmittanceUV(float r, float mu) {
    float uR, uMu;
#ifdef TRANSMITTANCE_NON_LINEAR
    uR = sqrt((r - Rg) / (Rt - Rg));
    uMu = atan((mu + 0.15) / (1.0 + 0.15) * tan(1.5)) / 1.5;
#else
    uR = (r - Rg) / (Rt - Rg);
    uMu = (mu + 0.15) / (1.0 + 0.15);
#endif
    return float2(uMu, uR);
}

void getTransmittanceRMu(out float r, out float muS, float2 fragCoord) {
    r = fragCoord.y / float(TRANSMITTANCE_H);
    muS = fragCoord.x / float(TRANSMITTANCE_W);
#ifdef TRANSMITTANCE_NON_LINEAR
    r = Rg + (r * r) * (Rt - Rg);
    muS = -0.15 + tan(1.5 * muS) / tan(1.5) * (1.0 + 0.15);
#else
    r = Rg + r * (Rt - Rg);
    muS = -0.15 + muS * (1.0 + 0.15);
#endif
}

float2 getIrradianceUV(float r, float muS) {
    float uR = (r - Rg) / (Rt - Rg);
    float uMuS = (muS + 0.2) / (1.0 + 0.2);
    return float2(uMuS, uR);
}

void getIrradianceRMuS(out float r, out float muS, float2 fragCoord) {
    r = Rg + (fragCoord.y - 0.5) / (float(SKY_H) - 1.0) * (Rt - Rg);
    muS = -0.2 + (fragCoord.x - 0.5) / (float(SKY_W) - 1.0) * (1.0 + 0.2);
}



float4 texture4D(sampler2DARRAY table, float r, float mu, float muS, float nu)
{
    float H = sqrt(Rt * Rt - Rg * Rg);
    float rho = sqrt(r * r - Rg * Rg);
#ifdef INSCATTER_NON_LINEAR
    float rmu = r * mu;
    float delta = rmu * rmu - r * r + Rg * Rg;
    vec4 cst = rmu < 0.0 && delta > 0.0 ? vec4(1.0, 0.0, 0.0, 0.5 - 0.5 / float(RES_MU)) : vec4(-1.0, H * H, H, 0.5 + 0.5 / float(RES_MU));
    //float uR = 0.5 / float(RES_R) + rho / H * (1.0 - 1.0 / float(RES_R));
    float uR = RES_R - (rho / H);
    float uMu = cst.w + (rmu * cst.x + sqrt(delta + cst.y)) / (rho + cst.z) * (0.5 - 1.0 / float(RES_MU));
    // paper formula
    //float uMuS = 0.5 / float(RES_MU_S) + max((1.0 - exp(-3.0 * muS - 0.6)) / (1.0 - exp(-3.6)), 0.0) * (1.0 - 1.0 / float(RES_MU_S));
    // better formula
    float uMuS = 0.5 / float(RES_MU_S) + (atan(max(muS, -0.1975) * tan(1.26 * 1.1)) / 1.1 + (1.0 - 0.26)) * 0.5 * (1.0 - 1.0 / float(RES_MU_S));
#else
    float uR = 0.5 / float(RES_R) + rho / H * (1.0 - 1.0 / float(RES_R));
    float uMu = 0.5 / float(RES_MU) + (mu + 1.0) / 2.0 * (1.0 - 1.0 / float(RES_MU));
    float uMuS = 0.5 / float(RES_MU_S) + max(muS + 0.2, 0.0) / 1.2 * (1.0 - 1.0 / float(RES_MU_S));
#endif
    float lerp = (nu + 1.0) / 2.0 * (float(RES_NU) - 1.0);
    float uNu = floor(lerp);
    lerp = lerp - uNu;
    return tex2DARRAY(table, float3((uNu + uMuS) / float(RES_NU), uMu, uR)) * (1.0 - lerp) +
           tex2DARRAY(table, float3((uNu + uMuS) / float(RES_NU), uMu, uR+1.0)) * lerp;
}



void getMuMuSNu(float r, float4 dhdH, out float mu, out float muS, out float nu, float2 fragCoord) {
    float x = fragCoord.x;
    float y = fragCoord.y;
#ifdef INSCATTER_NON_LINEAR
    if (y < float(RES_MU) / 2.0) {
        float d = 1.0 - y / (float(RES_MU) / 2.0 - 1.0);
        d = min(max(dhdH.z, d * dhdH.w), dhdH.w * 0.999);
        mu = (Rg * Rg - r * r - d * d) / (2.0 * r * d);
        mu = min(mu, -sqrt(1.0 - (Rg / r) * (Rg / r)) - 0.001);
    } else {
        float d = (y - float(RES_MU) / 2.0) / (float(RES_MU) / 2.0 - 1.0);
        d = min(max(dhdH.x, d * dhdH.y), dhdH.y * 0.999);
        mu = (Rt * Rt - r * r - d * d) / (2.0 * r * d);
    }
    muS = mod(x, float(RES_MU_S)) / (float(RES_MU_S) - 1.0);
    // paper formula
    //muS = -(0.6 + log(1.0 - muS * (1.0 -  exp(-3.6)))) / 3.0;
    // better formula
    muS = tan((2.0 * muS - 1.0 + 0.26) * 1.1) / tan(1.26 * 1.1);
    nu = -1.0 + floor(x / float(RES_MU_S)) / (float(RES_NU) - 1.0) * 2.0;
#else
    mu = -1.0 + 2.0 * y / (float(RES_MU) - 1.0);
    muS = mod(x, float(RES_MU_S)) / (float(RES_MU_S) - 1.0);
    muS = -0.2 + muS * 1.2;
    nu = -1.0 + floor(x / float(RES_MU_S)) / (float(RES_NU) - 1.0) * 2.0;
#endif
}





// UTILITY FUNCTIONS

// Converts a cg coord ([0..1]) to a gl_FragCoord ([0..pixels])
void toFragCoord(float2 texcoord, float2 dim, out float2 fragcoord) {
    fragcoord = float2(texcoord * dim) + float2(0,0.5);
}


void getDhdhR(float layer, out float4 dhdH, out float res_r) {
    float r = layer / (RES_R - 1.0);
    r = r * r;
    r = sqrt(Rg * Rg + r * (Rt * Rt - Rg * Rg)) + (layer == 0.0 ? 0.01 : (layer == RES_R - 1 ? -0.001 : 0.0));
    float dmin = Rt - r;
    float dmax = sqrt(r * r - Rg * Rg) + sqrt(Rt * Rt - Rg * Rg);
    float dminp = r - Rg;
    float dmaxp = sqrt(r * r - Rg * Rg);
    res_r = r;
    dhdH = float4(dmin, dmax, dminp, dmaxp);
}

// nearest intersection of ray r,mu with ground or top atmosphere boundary
// mu=cos(ray zenith angle at ray origin)
float limit(float r, float mu) {
    float dout = -r * mu + sqrt(r * r * (mu * mu - 1.0) + RL * RL);
    float delta2 = r * r * (mu * mu - 1.0) + Rg * Rg;
    if (delta2 >= 0.0) {
        float din = -r * mu - sqrt(delta2);
        if (din >= 0.0) {
            dout = min(dout, din);
        }
    }
    return dout;
}

// transmittance(=transparency) of atmosphere for infinite ray (r,mu)
// (mu=cos(view zenith angle)), intersections with ground ignored
float3 transmittance(float r, float mu, sampler2D tx_transmittance) {
    float2 uv = getTransmittanceUV(r, mu);
    return tex2D(tx_transmittance, uv).rgb;
}

// transmittance(=transparency) of atmosphere for infinite ray (r,mu)
// (mu=cos(view zenith angle)), or zero if ray intersects ground
float3 transmittanceWithShadow(float r, float mu, sampler2D tx_transmittance) {
    return mu < -sqrt(1.0 - (Rg / r) * (Rg / r)) ? float3(0.0) : transmittance(r, mu, tx_transmittance);
}

// transmittance(=transparency) of atmosphere between x and x0
// assume segment x,x0 not intersecting ground
// r=||x||, mu=cos(zenith angle of [x,x0) ray at x), v=unit direction vector of [x,x0) ray
float3 transmittance(float r, float mu, float3 v, float3 x0, sampler2D tx_transmittance) {
    float3 result;
    float r1 = length(x0);
    float mu1 = dot(x0, v) / r;
    if (mu > 0.0) {
        result = min(transmittance(r, mu, tx_transmittance) / transmittance(r1, mu1, tx_transmittance), 1.0);
    } else {
        result = min(transmittance(r1, -mu1, tx_transmittance) / transmittance(r, -mu, tx_transmittance), 1.0);
    }
    return result;
}


// optical depth for ray (r,mu) of length d, using analytic formula
// (mu=cos(view zenith angle)), intersections with ground ignored
// H=height scale of exponential density function
float opticalDepth(float H, float r, float mu, float d) {
    float a = sqrt((0.5/H)*r);
    float2 a01 = a*float2(mu, mu + d / r);
    float2 a01s = sign(a01);
    float2 a01sq = a01*a01;
    float x = a01s.y > a01s.x ? exp(a01sq.x) : 0.0;
    float2 y = a01s / (2.3193*abs(a01) + sqrt(1.52*a01sq + 4.0)) * float2(1.0, exp(-d/H*(d/(2.0*r)+mu)));
    return sqrt((6.2831*H)*r) * exp((Rg-r)/H) * (x + dot(y, float2(1.0, -1.0)));
}

// transmittance(=transparency) of atmosphere for ray (r,mu) of length d
// (mu=cos(view zenith angle)), intersections with ground ignored
// uses analytic formula instead of transmittance texture
float3 analyticTransmittance(float r, float mu, float d) {
    return exp(- betaR * opticalDepth(HR, r, mu, d) - betaMEx * opticalDepth(HM, r, mu, d));
}


// transmittance(=transparency) of atmosphere between x and x0
// assume segment x,x0 not intersecting ground
// d = distance between x and x0, mu=cos(zenith angle of [x,x0) ray at x)
float3 transmittance(float r, float mu, float d, sampler2D tx_transmittance) {
    float3 result;
    float r1 = sqrt(r * r + d * d + 2.0 * r * mu * d);
    float mu1 = (r * mu + d) / r1;
    if (mu > 0.0) {
        result = min(transmittance(r, mu, tx_transmittance) / transmittance(r1, mu1, tx_transmittance), 1.0);
    } else {
        result = min(transmittance(r1, -mu1, tx_transmittance) / transmittance(r, -mu, tx_transmittance), 1.0);
    }
    return result;
}


float3 irradiance(sampler2D sampler, float r, float muS) {
    float2 uv = getIrradianceUV(r, muS);
    return tex2D(sampler, uv).rgb;
}


// Rayleigh phase function
float phaseFunctionR(float mu) {
    return (3.0 / (16.0 * M_PI)) * (1.0 + mu * mu);
}

// Mie phase function
float phaseFunctionM(float mu) {
    return 1.5 * 1.0 / (4.0 * M_PI) * (1.0 - mieG*mieG) * pow(1.0 + (mieG*mieG) - 2.0*mieG*mu, -3.0/2.0) * (1.0 + mu * mu) / (2.0 + mieG*mieG);
}

// approximated single Mie scattering (cf. approximate Cm in paragraph "Angular precision")
float3 getMie(float4 rayMie) { // rayMie.rgb=C*, rayMie.w=Cm,r
    return rayMie.rgb * rayMie.w / max(rayMie.r, 1e-4) * (betaR.r / betaR);
}




////////////////////////////////////////////////////////////
// FILE: scattering/transmittance.cg
////////////////////////////////////////////////////////////


float opticalDepth(float H, float r, float mu) {
    float result = 0.0;
    float dx = limit(r, mu) / float(TRANSMITTANCE_INTEGRAL_SAMPLES);
    float xi = 0.0;
    float yi = exp(-(r - Rg) / H);
    for (int i = 1; i <= TRANSMITTANCE_INTEGRAL_SAMPLES; ++i) {
        float xj = float(i) * dx;
        float yj = exp(-(sqrt(r * r + xj * xj + 2.0 * xj * r * mu) - Rg) / H);
        result += (yi + yj) / 2.0 * dx;
        xi = xj;
        yi = yj;
    }
    return mu < -sqrt(1.0 - (Rg / r) * (Rg / r)) ? 1e9 : result;
}

 

void vshader(
    float4 vtx_position : POSITION,
    uniform float4x4 mat_modelproj,
    out float2 l_txcoord : TEXCOORD0,
    out float4 l_position : POSITION)
{
    l_position=mul(mat_modelproj, vtx_position);
    l_txcoord = (vtx_position.xz / 2.0) + 0.5;
    // l_txcoord.xy = float2(l_txcoodrd.x, 1.0 - l_txcoord.y);
    
}


void fshader(
    in float2 l_txcoord : TEXCOORD0,
    out float4 o_color : COLOR)
{
    float r, muS;
    float2 fragCoord;
    toFragCoord(l_txcoord.xy, float2(TRANSMITTANCE_W, TRANSMITTANCE_H), fragCoord);
    getTransmittanceRMu(r, muS, fragCoord);
    float3 depth = betaR * opticalDepth(HR, r, muS) + betaMEx * opticalDepth(HM, r, muS);
    o_color = float4(exp(-depth), 1);
    // o_color = float4(l_txcoord.xy,0,1);
}

