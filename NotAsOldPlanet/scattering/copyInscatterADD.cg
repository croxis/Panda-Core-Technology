

void vshader(
    float4 vtx_position : POSITION,
    uniform float4x4 mat_modelproj,
    out float3 l_txcoord : TEXCOORD0,
    out float4 l_position : POSITION)
{
    l_position=mul(mat_modelproj, vtx_position);
    l_txcoord.xy = (vtx_position.xz / 2.0) + 0.5;
    
    l_txcoord.z = 0;
}


TRIANGLE void gshader(AttribArray<float4> position  : POSITION, 
                      AttribArray<float4> texCoord : TEXCOORD0,
                      uniform float4x4 mat_modelproj
                      )
{ 
  for (int layer = 0;layer<ACTUAL_LAYERS;layer++) { // create n layers
    for(int i=0; i<3; i++) {
      float3 txcoord = float3(texCoord[i].xy, layer); 
      emitVertex(position[i]  :POSITION,
                 txcoord      :TEXCOORD0,
                 layer        :LAYER);
    }
    restartStrip();
  }
}


void fshader(
    in float3 l_txcoord : TEXCOORD0,
    in uniform sampler2DARRAY tx_deltaS : TEXUNIT0,
    in uniform sampler2DARRAY tx_add_to : TEXUNIT1,
    out float4 o_color : COLOR)
{

    float2 fragCoord;
    toFragCoord(l_txcoord.xy, float2(RES_RNU, RES_MU), fragCoord);
    
    float4 dhdH; float r;
    getDhdhR(l_txcoord.z, dhdH, r);
    float4 src = tex2DARRAY(tx_add_to, l_txcoord.xyz);

    float mu, muS, nu;
    getMuMuSNu(r, dhdH, mu, muS, nu, l_txcoord.xy * float2(256, 128));
    float3 result = tex2DARRAY(tx_deltaS,l_txcoord.xyz).xyz;

    o_color = float4(src.rgb + result,1);
    // o_color = tex2D(tx_add_to, l_txcoord.xy) + (k_k * tex2D(tx_deltaE, l_txcoord));
}