

float opticalDepth(float H, float r, float mu) {
    float result = 0.0;
    float dx = limit(r, mu) / float(TRANSMITTANCE_INTEGRAL_SAMPLES);
    float xi = 0.0;
    float yi = exp(-(r - Rg) / H);
    for (int i = 1; i <= TRANSMITTANCE_INTEGRAL_SAMPLES; ++i) {
        float xj = float(i) * dx;
        float yj = exp(-(sqrt(r * r + xj * xj + 2.0 * xj * r * mu) - Rg) / H);
        result += (yi + yj) / 2.0 * dx;
        xi = xj;
        yi = yj;
    }
    return mu < -sqrt(1.0 - (Rg / r) * (Rg / r)) ? 1e9 : result;
}

 

void vshader(
    float4 vtx_position : POSITION,
    uniform float4x4 mat_modelproj,
    out float2 l_txcoord : TEXCOORD0,
    out float4 l_position : POSITION)
{
    l_position=mul(mat_modelproj, vtx_position);
    l_txcoord = (vtx_position.xz / 2.0) + 0.5;
    // l_txcoord.xy = float2(l_txcoodrd.x, 1.0 - l_txcoord.y);
    
}


void fshader(
    in float2 l_txcoord : TEXCOORD0,
    out float4 o_color : COLOR)
{
    float r, muS;
    float2 fragCoord;
    toFragCoord(l_txcoord.xy, float2(TRANSMITTANCE_W, TRANSMITTANCE_H), fragCoord);
    getTransmittanceRMu(r, muS, fragCoord);
    float3 depth = betaR * opticalDepth(HR, r, muS) + betaMEx * opticalDepth(HM, r, muS);
    o_color = float4(exp(-depth), 1);
    // o_color = float4(l_txcoord.xy,0,1);
}