// Rayleigh
const float HR = 8.0;
const vec3 betaR = vec3(5.8e-3, 1.35e-2, 3.31e-2);

// Mie
// DEFAULT
const float HM = 1.2;
const vec3 betaMSca = vec3(4e-3);
const vec3 betaMEx = betaMSca / 0.9;
const float mieG = 0.8;
// CLEAR SKY
/*const float HM = 1.2;
const vec3 betaMSca = vec3(20e-3);
const vec3 betaMEx = betaMSca / 0.9;
const float mieG = 0.76;*/
// PARTLY CLOUDY
/*const float HM = 3.0;
const vec3 betaMSca = vec3(3e-3);
const vec3 betaMEx = betaMSca / 0.9;
const float mieG = 0.65;*/

// ----------------------------------------------------------------------------
// NUMERICAL INTEGRATION PARAMETERS
// ----------------------------------------------------------------------------

const int TRANSMITTANCE_INTEGRAL_SAMPLES = 500;
const int INSCATTER_INTEGRAL_SAMPLES = 50;
const int IRRADIANCE_INTEGRAL_SAMPLES = 32;
const int INSCATTER_SPHERICAL_INTEGRAL_SAMPLES = 16;

const int TRANSMITTANCE_W = 256;
const int TRANSMITTANCE_H = 64;

const float M_PI = 3.141592657;

in float g_Rg;
in float RL;
in float Rt;

void getTransmittanceRMu(out float alt, out float mu) {
    alt = gl_FragCoord.y / float(TRANSMITTANCE_H);
    mu = gl_FragCoord.x / float(TRANSMITTANCE_W);
#ifdef TRANSMITTANCE_NON_LINEAR
    alt = g_Rg + (alt * alt) * (Rt - g_Rg);
    mu = -0.15 + tan(1.5 * mu) / tan(1.5) * (1.0 + 0.15);
#else
    alt = g_Rg + alt * (Rt - g_Rg);
    mu = -0.15 + mu * (1.0 + 0.15);
#endif
}


// nearest intersection of ray r,mu with ground or top atmosphere boundary
// mu=cos(ray zenith angle at ray origin)
float itersectAtmosphere(float r, float mu) {
    float dout = -r * mu + sqrt(r * r * (mu * mu - 1.0) + RL * RL);
    float delta2 = r * r * (mu * mu - 1.0) + g_Rg * g_Rg;
    if (delta2 >= 0.0) {
        float din = -r * mu - sqrt(delta2);
        if (din >= 0.0) {
            dout = min(dout, din);
        }
    }
    return dout;
}

float densityOverPath(in float scaleHeight, in float alt, in float mu)
{
    // if ray below horizon return max density
    float cosHorizon = -sqrt(1.0 - ((g_Rg*g_Rg)/(alt*alt)));
    if(mu < cosHorizon)
        return 1e9;

    float totalDensity = 0.0;
    float dx = itersectAtmosphere(alt,mu) /
            float(TRANSMITTANCE_INTEGRAL_SAMPLES);

    float y_j = exp(-(alt-g_Rg)/scaleHeight);

    for (int i = 1; i<=TRANSMITTANCE_INTEGRAL_SAMPLES; ++i)
    {
        float x_i = float(i)*dx;
        float alt_i = sqrt(alt*alt + x_i*x_i + 2.0*x_i*alt*mu);
        float y_i = exp(-(alt_i-g_Rg)/scaleHeight);
        totalDensity += (y_j+y_i)/2.0*dx;
        y_j = y_i;
    }
    
    return totalDensity;

}

void main()
{  
    float alt, mu;
    getTransmittanceRMu(alt, mu);
    // calculates extinction factor of given altitude and view direction
    vec3 t = betaR * densityOverPath(HR, alt, mu) +
             betaMEx * densityOverPath(HM, alt, mu);
    gl_FragColor = vec4(exp(-t), 0.0);
    //gl_FragColor = vec4(exp(-t), 1.0);
    //gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
}
